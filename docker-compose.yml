services:

  webserver:
    container_name: ${NAMESPACE}_webserver
    image: nginx:${NGINX_VERSION}
    depends_on:
      - php
    ports:
      - "8080:8080"
    command: '/usr/sbin/nginx -g "daemon off; error_log /dev/stderr info;"'
    networks:
      default:
        aliases:
          - ${SHOPURI}
    volumes:
      - app_data:${WORKDIR_SERVER}:delegated
      - .docker/nginx/config/nginx.conf:/etc/nginx/nginx.conf:ro
      - .docker/nginx/config/default.conf:/etc/nginx/conf.d/default.conf:ro

  php:
    container_name: ${NAMESPACE}_php
    image: osioaliu/php:${PHP_VERSION_SET}
    env_file: .env
    sysctls:
      net.core.somaxconn: 65536
    depends_on:
      redis_session:
        condition: service_healthy
      redis_cache:
        condition: service_healthy
    user: ${UID_GID}
    restart: on-failure
    entrypoint: [ "fixuid","docker-php-entrypoint" ]
    command: [ "php-fpm" ]
    extra_hosts:
      - "host.docker.internal:host-gateway"
    volumes:
      - app_data:${WORKDIR_SERVER}:delegated
      - composer_cache:/home/www-data/.composer:delegated
      - .docker/php/config/xdebug.ini:/usr/local/etc/php/conf.d/xdebug.ini:ro
      - .docker/php/config/php-ini-overrides.ini:/usr/local/etc/php/conf.d/php-ini-overrides.ini:ro
      - .docker/php/config/zz-docker.conf:/usr/local/etc/php-fpm.d/zz-docker.conf:ro

  db:
    container_name: ${NAMESPACE}_db
    image: postgres:${PG_VERSION}
    env_file: .env
    environment:
      POSTGRES_PASSWORD: ${PG_PASSWORD}
    volumes:
      - db_data:/var/lib/postgresql/data



  redis_session:
    container_name: ${NAMESPACE}_redis_session
    image: redis:${REDIS_VERSION}
    sysctls:
      net.core.somaxconn: '1024'
    entrypoint: redis-server
    command: [ "/etc/redis/redis.conf", "--appendonly", "yes" ]
    healthcheck:
      test: 'redis-cli ping || exit 1'
      interval: 30s
      timeout: 30s
      retries: 3
    volumes:
      - redis_socket_session:/run/redis/
      - ./.docker/redis/redis.conf:/etc/redis/redis.conf:ro

  redis_cache:
    container_name: ${NAMESPACE}_redis_cache
    image: redis:${REDIS_VERSION}
    sysctls:
      net.core.somaxconn: '1024'
    entrypoint: redis-server
    command: [ "/etc/redis/redis.conf", "--appendonly", "yes" ]
    healthcheck:
      test: 'redis-cli ping || exit 1'
      interval: 30s
      timeout: 30s
      retries: 3
    volumes:
      - redis_socket_cache:/run/redis/
      - ./.docker/redis/redis.conf:/etc/redis/redis.conf:ro

  opensearch:
    container_name: ${NAMESPACE}_opensearch
    image: markoshust/magento-opensearch:${OPENSEARCH_VERSION}
    env_file: .env
    ports:
      - "9200:9200"
      - "9300:9300"
    environment:
      - "discovery.type=single-node"
      - "cluster.routing.allocation.disk.threshold_enabled=false"
      - "index.blocks.read_only_allow_delete"
    volumes:
      - opensearch_data:/usr/share/opensearch/data

  mailhog:
    container_name: ${NAMESPACE}_mailhog
    image: mailhog/mailhog:${MAILHOG_VERSION}
    ports:
      - ${MAILHOG_EXTERNAL_PORT}:8025
      - "1025:1025"

#  rabbitmq:
#    container_name: ${NAMESPACE}_rabbitmq
#    image: rabbitmq:${RABBITMQ_VERSION}
#    environment:
#      RABBITMQ_DEFAULT_USER: admin
#      RABBITMQ_DEFAULT_PASS: admin2017
#    ports:
#      - "15672:15672"
#      - "5672:5672"
#    volumes:
#      - rabbitmq_data:/var/lib/rabbitmq

#  watchtower:
#    container_name: ${NAMESPACE}_watchtower
#    image: containrrr/watchtower
#    volumes:
#      - /var/run/docker.sock:/var/run/docker.sock
#    environment:
#      TZ: ${TZ}
#    command: --interval 3600

volumes:
  # rabbitmq_data:
  db_data:
  opensearch_data:
  redis_socket_cache:
  redis_socket_session:
  app_data:
    driver_opts:
      type: none
      o: bind
      device: ${WORKDIR}
  composer_cache:
    driver_opts:
      type: none
      o: bind
      device: ${HOME}/.composer

networks:
  default:
    ipam:
      config:
        - subnet: 172.19.0.0/16